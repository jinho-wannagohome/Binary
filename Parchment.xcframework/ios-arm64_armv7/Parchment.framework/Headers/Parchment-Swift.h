#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef PARCHMENT_SWIFT_H
#define PARCHMENT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Parchment",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;
@protocol UIViewControllerTransitionCoordinator;
@class NSString;
@class NSBundle;

/// PageViewController is a replacement for <code>UIPageViewController</code>
/// using <code>UIScrollView</code>. It provides detailed delegate methods, which
/// is the main issue with <code>UIPageViewController</code>.
SWIFT_CLASS("_TtC9Parchment18PageViewController")
@interface PageViewController : UIViewController
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class UIScrollView;

@interface PageViewController (SWIFT_EXTENSION(Parchment)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)_ withVelocity:(CGPoint)_ targetContentOffset:(CGPoint * _Nonnull)_;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)_;
@end



SWIFT_CLASS("_TtC9Parchment28PagingBorderLayoutAttributes")
@interface PagingBorderLayoutAttributes : UICollectionViewLayoutAttributes
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom <code>UICollectionViewReusableView</code> subclass used to display
/// the border at the bottom of the menu items. You can subclass this
/// type if you need further customization; just override the
/// <code>borderClass</code> property in <code>PagingViewController</code>.
SWIFT_CLASS("_TtC9Parchment16PagingBorderView")
@interface PagingBorderView : UICollectionReusableView
- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom <code>UICollectionViewCell</code> subclass used to display the menu
/// items. When creating your own custom cells, you need to subclass
/// this type instead of <code>UICollectionViewCell</code> directly.
SWIFT_CLASS("_TtC9Parchment10PagingCell")
@interface PagingCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom <code>UICollectionViewLayoutAttributes</code> subclass that adds a
/// <code>progress</code> property indicating how far the user has scrolled.
SWIFT_CLASS("_TtC9Parchment26PagingCellLayoutAttributes")
@interface PagingCellLayoutAttributes : UICollectionViewLayoutAttributes
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionViewLayoutInvalidationContext;
@class NSIndexPath;

/// A custom <code>UICollectionViewLayout</code> subclass responsible for
/// defining the layout for all the <code>PagingItem</code> cells. You can
/// subclass this type if you need further customization outside what
/// is provided by customization properties on <code>PagingViewController</code>.
/// To create your own <code>PagingViewControllerLayout</code> you need to
/// override the <code>menuLayoutClass</code> property on <code>PagingViewController</code>.
/// Then you can override the methods you normally would to update the
/// layout attributes for each cell.
/// The layout has two decoration views; one for the border at the
/// bottom and one for the view that indicates the currently selected
/// <code>PagingItem</code>. You can customize their layout attributes by
/// updating the <code>indicatorLayoutAttributes</code> and
/// <code>borderLayoutAttributes</code> properties.
SWIFT_CLASS("_TtC9Parchment26PagingCollectionViewLayout")
@interface PagingCollectionViewLayout : UICollectionViewLayout
@property (nonatomic, readonly) CGSize collectionViewContentSize;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layoutAttributesClass;)
+ (Class _Nonnull)layoutAttributesClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL flipsHorizontallyInOppositeLayoutDirection;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareLayout;
- (void)invalidateLayout;
- (void)invalidateLayoutWithContext:(UICollectionViewLayoutInvalidationContext * _Nonnull)context;
- (UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)_ withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldInvalidateLayoutForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)preferredAttributes withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)originalAttributes SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)_ SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC9Parchment31PagingIndicatorLayoutAttributes")
@interface PagingIndicatorLayoutAttributes : UICollectionViewLayoutAttributes
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom <code>UICollectionViewReusableView</code> subclass used to display a
/// view that indicates the currently selected cell. You can subclass
/// this type if you need further customization; just override the
/// <code>indicatorClass</code> property in <code>PagingViewController</code>.
SWIFT_CLASS("_TtC9Parchment19PagingIndicatorView")
@interface PagingIndicatorView : UICollectionReusableView
- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9Parchment25PagingInvalidationContext")
@interface PagingInvalidationContext : UICollectionViewLayoutInvalidationContext
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

SWIFT_CLASS("_TtC9Parchment14PagingMenuView")
@interface PagingMenuView : UIView
/// The background color for the menu items.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Creates an instance of <code>PagingViewController</code>. You need to call
/// <code>select(pagingItem:animated:)</code> in order to set the initial view
/// controller before any items become visible.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;

@interface PagingMenuView (SWIFT_EXTENSION(Parchment)) <UICollectionViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// A custom <code>PagingCell</code> implementation that only displays a text
/// label. The title is based on the <code>PagingTitleItem</code> and the colors
/// are based on the <code>PagingTheme</code> passed into <code>setPagingItem:</code>. When
/// applying layout attributes it will interpolate between the default
/// and selected text color based on the <code>progress</code> property.
SWIFT_CLASS("_TtC9Parchment15PagingTitleCell")
@interface PagingTitleCell : PagingCell
@property (nonatomic, getter=isSelected) BOOL selected;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
@end


/// A custom <code>UIView</code> subclass used by <code>PagingViewController</code>,
/// responsible for setting up the view hierarchy and its layout
/// constraints.
/// If you need additional customization, like changing the
/// constraints, you can subclass <code>PagingView</code> and override
/// <code>loadView:</code> in <code>PagingViewController</code> to use your subclass.
SWIFT_CLASS("_TtC9Parchment10PagingView")
@interface PagingView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view controller that lets you to page between views while
/// showing menu items that scrolls along with the content.
/// The data source object is responsible for actually generating the
/// <code>PagingItem</code> as well as allocating the view controller that
/// corresponds to each item. See <code>PagingViewControllerDataSource</code>.
/// After providing a data source you need to call
/// <code>select(pagingItem:animated:)</code> to set the initial view controller.
/// You can also use the same method to programmatically navigate to
/// other view controllers.
SWIFT_CLASS("_TtC9Parchment20PagingViewController")
@interface PagingViewController : UIViewController <UICollectionViewDelegate>
/// Creates an instance of <code>PagingViewController</code>.
/// \param coder An unarchiver object.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)_ withVelocity:(CGPoint)_ targetContentOffset:(CGPoint * _Nonnull)_;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)_ willDecelerate:(BOOL)_;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)_;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGPoint)collectionView:(UICollectionView * _Nonnull)_ targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)_ didUnhighlightItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ willDisplayCell:(UICollectionViewCell * _Nonnull)_ forItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didEndDisplayingCell:(UICollectionViewCell * _Nonnull)_ forItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef PARCHMENT_SWIFT_H
#define PARCHMENT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Parchment",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;
@protocol UIViewControllerTransitionCoordinator;
@class NSString;
@class NSBundle;

/// PageViewController is a replacement for <code>UIPageViewController</code>
/// using <code>UIScrollView</code>. It provides detailed delegate methods, which
/// is the main issue with <code>UIPageViewController</code>.
SWIFT_CLASS("_TtC9Parchment18PageViewController")
@interface PageViewController : UIViewController
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class UIScrollView;

@interface PageViewController (SWIFT_EXTENSION(Parchment)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)_ withVelocity:(CGPoint)_ targetContentOffset:(CGPoint * _Nonnull)_;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)_;
@end



SWIFT_CLASS("_TtC9Parchment28PagingBorderLayoutAttributes")
@interface PagingBorderLayoutAttributes : UICollectionViewLayoutAttributes
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom <code>UICollectionViewReusableView</code> subclass used to display
/// the border at the bottom of the menu items. You can subclass this
/// type if you need further customization; just override the
/// <code>borderClass</code> property in <code>PagingViewController</code>.
SWIFT_CLASS("_TtC9Parchment16PagingBorderView")
@interface PagingBorderView : UICollectionReusableView
- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom <code>UICollectionViewCell</code> subclass used to display the menu
/// items. When creating your own custom cells, you need to subclass
/// this type instead of <code>UICollectionViewCell</code> directly.
SWIFT_CLASS("_TtC9Parchment10PagingCell")
@interface PagingCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom <code>UICollectionViewLayoutAttributes</code> subclass that adds a
/// <code>progress</code> property indicating how far the user has scrolled.
SWIFT_CLASS("_TtC9Parchment26PagingCellLayoutAttributes")
@interface PagingCellLayoutAttributes : UICollectionViewLayoutAttributes
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionViewLayoutInvalidationContext;
@class NSIndexPath;

/// A custom <code>UICollectionViewLayout</code> subclass responsible for
/// defining the layout for all the <code>PagingItem</code> cells. You can
/// subclass this type if you need further customization outside what
/// is provided by customization properties on <code>PagingViewController</code>.
/// To create your own <code>PagingViewControllerLayout</code> you need to
/// override the <code>menuLayoutClass</code> property on <code>PagingViewController</code>.
/// Then you can override the methods you normally would to update the
/// layout attributes for each cell.
/// The layout has two decoration views; one for the border at the
/// bottom and one for the view that indicates the currently selected
/// <code>PagingItem</code>. You can customize their layout attributes by
/// updating the <code>indicatorLayoutAttributes</code> and
/// <code>borderLayoutAttributes</code> properties.
SWIFT_CLASS("_TtC9Parchment26PagingCollectionViewLayout")
@interface PagingCollectionViewLayout : UICollectionViewLayout
@property (nonatomic, readonly) CGSize collectionViewContentSize;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layoutAttributesClass;)
+ (Class _Nonnull)layoutAttributesClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL flipsHorizontallyInOppositeLayoutDirection;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareLayout;
- (void)invalidateLayout;
- (void)invalidateLayoutWithContext:(UICollectionViewLayoutInvalidationContext * _Nonnull)context;
- (UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)_ withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldInvalidateLayoutForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)preferredAttributes withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)originalAttributes SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)_ SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC9Parchment31PagingIndicatorLayoutAttributes")
@interface PagingIndicatorLayoutAttributes : UICollectionViewLayoutAttributes
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom <code>UICollectionViewReusableView</code> subclass used to display a
/// view that indicates the currently selected cell. You can subclass
/// this type if you need further customization; just override the
/// <code>indicatorClass</code> property in <code>PagingViewController</code>.
SWIFT_CLASS("_TtC9Parchment19PagingIndicatorView")
@interface PagingIndicatorView : UICollectionReusableView
- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9Parchment25PagingInvalidationContext")
@interface PagingInvalidationContext : UICollectionViewLayoutInvalidationContext
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

SWIFT_CLASS("_TtC9Parchment14PagingMenuView")
@interface PagingMenuView : UIView
/// The background color for the menu items.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Creates an instance of <code>PagingViewController</code>. You need to call
/// <code>select(pagingItem:animated:)</code> in order to set the initial view
/// controller before any items become visible.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;

@interface PagingMenuView (SWIFT_EXTENSION(Parchment)) <UICollectionViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// A custom <code>PagingCell</code> implementation that only displays a text
/// label. The title is based on the <code>PagingTitleItem</code> and the colors
/// are based on the <code>PagingTheme</code> passed into <code>setPagingItem:</code>. When
/// applying layout attributes it will interpolate between the default
/// and selected text color based on the <code>progress</code> property.
SWIFT_CLASS("_TtC9Parchment15PagingTitleCell")
@interface PagingTitleCell : PagingCell
@property (nonatomic, getter=isSelected) BOOL selected;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
@end


/// A custom <code>UIView</code> subclass used by <code>PagingViewController</code>,
/// responsible for setting up the view hierarchy and its layout
/// constraints.
/// If you need additional customization, like changing the
/// constraints, you can subclass <code>PagingView</code> and override
/// <code>loadView:</code> in <code>PagingViewController</code> to use your subclass.
SWIFT_CLASS("_TtC9Parchment10PagingView")
@interface PagingView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view controller that lets you to page between views while
/// showing menu items that scrolls along with the content.
/// The data source object is responsible for actually generating the
/// <code>PagingItem</code> as well as allocating the view controller that
/// corresponds to each item. See <code>PagingViewControllerDataSource</code>.
/// After providing a data source you need to call
/// <code>select(pagingItem:animated:)</code> to set the initial view controller.
/// You can also use the same method to programmatically navigate to
/// other view controllers.
SWIFT_CLASS("_TtC9Parchment20PagingViewController")
@interface PagingViewController : UIViewController <UICollectionViewDelegate>
/// Creates an instance of <code>PagingViewController</code>.
/// \param coder An unarchiver object.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)_ withVelocity:(CGPoint)_ targetContentOffset:(CGPoint * _Nonnull)_;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)_ willDecelerate:(BOOL)_;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)_;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGPoint)collectionView:(UICollectionView * _Nonnull)_ targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)_ didUnhighlightItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ willDisplayCell:(UICollectionViewCell * _Nonnull)_ forItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didEndDisplayingCell:(UICollectionViewCell * _Nonnull)_ forItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
